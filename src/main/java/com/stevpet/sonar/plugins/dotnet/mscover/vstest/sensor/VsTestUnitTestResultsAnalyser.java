/*******************************************************************************
 *
 * SonarQube MsCover Plugin
 * Copyright (C) 2015 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 *
 * Author: Peter Stevens, peter@famstevens.eu
 *******************************************************************************/
package com.stevpet.sonar.plugins.dotnet.mscover.vstest.sensor;

import java.io.File;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.sonar.api.batch.SensorContext;
import org.sonar.api.batch.fs.FileSystem;
import org.sonar.api.resources.Project;
import org.sonar.api.utils.SonarException;

import com.stevpet.sonar.plugins.dotnet.mscover.opencover.parser.ConcreteOpenCoverParserFactory;
import com.stevpet.sonar.plugins.dotnet.mscover.opencover.parser.OpenCoverParserFactory;
import com.stevpet.sonar.plugins.dotnet.mscover.parser.XmlParserSubject;
import com.stevpet.sonar.plugins.dotnet.mscover.registry.MethodToSourceFileIdMap;
import com.stevpet.sonar.plugins.dotnet.mscover.registry.SourceFileNameTable;
import com.stevpet.sonar.plugins.dotnet.mscover.registry.SourceFilePathHelper;
import com.stevpet.sonar.plugins.dotnet.mscover.registry.UnitTestFilesResultRegistry;
import com.stevpet.sonar.plugins.dotnet.mscover.registry.UnitTestRegistry;
import com.stevpet.sonar.plugins.dotnet.mscover.registry.UnitTestingResults;
import com.stevpet.sonar.plugins.dotnet.mscover.saver.ResourceMediator;
import com.stevpet.sonar.plugins.dotnet.mscover.saver.test.TrxTestSaver;
import com.stevpet.sonar.plugins.dotnet.mscover.sonarseams.MeasureSaver;
import com.stevpet.sonar.plugins.dotnet.mscover.vstest.coverageparser.ConcreteVsTestParserFactory;
import com.stevpet.sonar.plugins.dotnet.mscover.vstest.coverageparser.VsTestParserFactory;
import com.stevpet.sonar.plugins.dotnet.mscover.vstest.trxparser.ConcreteVsTestFactory;
import com.stevpet.sonar.plugins.dotnet.mscover.vstest.trxparser.VsTestFactory;

public class VsTestUnitTestResultsAnalyser {

    static final Logger LOG = LoggerFactory
            .getLogger(VsTestUnitTestResultsAnalyser.class);
    private UnitTestRegistry registry;
    private UnitTestFilesResultRegistry filesResultRegistry;
    private SourceFileNameTable sourceFileNamesRegistry;

    private MethodToSourceFileIdMap map;
    private OpenCoverParserFactory openCoverParserFactory = new ConcreteOpenCoverParserFactory();
    private VsTestParserFactory factory = new ConcreteVsTestParserFactory();
    private MeasureSaver measureSaver;
    private SourceFilePathHelper sourceFilePathHelper = new SourceFilePathHelper();
    private ResourceMediator resourceMediator;
    private FileSystem fileSystem;
    private SensorContext sensorContext;
    private Project project;
    

    public VsTestUnitTestResultsAnalyser() {
        
    }
    
    public VsTestUnitTestResultsAnalyser(SensorContext sensorContext,Project project,MeasureSaver measureSaver, SourceFilePathHelper sourceFilePathHelper,ResourceMediator resourceMediator,FileSystem fileSystem) {
        this.measureSaver = measureSaver;
        this.sourceFilePathHelper = sourceFilePathHelper;
        this.resourceMediator = resourceMediator; 
        this.fileSystem=fileSystem;
        this.sensorContext=sensorContext;
        this.project=project;
    }
    
    
    public void setMeasureSaver(MeasureSaver measureSaver) {
        this.measureSaver = measureSaver;
    }
    
    public void setSourceFilePathHelper(SourceFilePathHelper sourceFilePathHelper) {
        this.sourceFilePathHelper = sourceFilePathHelper;
    }
    
    public void setResourceMediator(ResourceMediator resourceMediator) {
        this.resourceMediator = resourceMediator;
    }
    /**
     * Saves the test results, using the coverage-report.xml file generated by OpenCover to
     * link unit tests to source files
     */
    public void analyseOpenCoverTestResults(String coveragePath, String resultsPath) {
        createRegistries(); 
        
        parseUnitTestResultsFile(resultsPath);      
        parseOpenCoverFile(coveragePath);
        
        saveUnitTests();
    }
    /**
     * Saves the test results, using the coverage.xml file generated by vstest to
     * link unit tests to source files
     * @param coveragePath
     * @param resultsPath
     */
    public void analyseVsTestResults(String coveragePath, String resultsPath) {
        createRegistries(); 
        
        parseUnitTestResultsFile(resultsPath);      
        parseCoverageFile(coveragePath);
        
        saveUnitTests();
    }
    private void parseCoverageFile(String coverageFileName) {
        XmlParserSubject parser = factory.createFileNamesParser(map, sourceFileNamesRegistry);
        
        LOG.info("MSCover Reading " + coverageFileName );
        File coverageFile = new File(coverageFileName);
        parser.parseFile(coverageFile);
    }
    
    private void parseOpenCoverFile(String openCoverFileName) {
       XmlParserSubject parser = openCoverParserFactory.createOpenCoverFileNamesParser(map, sourceFileNamesRegistry);
        
        File coverageFile = new File(openCoverFileName);
        parser.parseFile(coverageFile);       
    }

    private void saveUnitTests() {

        File projectDirectory =  fileSystem.baseDir();
        sourceFilePathHelper.setProjectFile(projectDirectory);
        
        UnitTestingResults unitTestResultRegistry = registry.getTestingResults();
        filesResultRegistry.mapMethodsToFileId(unitTestResultRegistry, map);
       
        TrxTestSaver testSaver = new TrxTestSaver(sensorContext, project, resourceMediator,measureSaver);

        testSaver.setUnitTestFilesResultRegistry(filesResultRegistry);
        testSaver.setSourceFileNamesRegistry(sourceFileNamesRegistry);
        testSaver.setSourceFilePathHelper(sourceFilePathHelper);
        LOG.info("MsCover Saving results");
        testSaver.save();
    }


   
    private void parseUnitTestResultsFile(String resultsPath) {
        VsTestFactory vsTestFactory = new ConcreteVsTestFactory();
        XmlParserSubject resultsParser = vsTestFactory.createUnitTestResultsParser(registry); 
        
        File file = new File(resultsPath);
        if(!file.exists()) {
            throw new SonarException("Can't open " + resultsPath );
        }
        resultsParser.parseFile(file);
    }

    private void createRegistries() {
        registry = new UnitTestRegistry();
        map = new MethodToSourceFileIdMap();
        filesResultRegistry = new UnitTestFilesResultRegistry();
        sourceFileNamesRegistry = new SourceFileNameTable();
    }

    public void setFileSystem(FileSystem fileSystem) {
        this.fileSystem=fileSystem;
    }
    
}
